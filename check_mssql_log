#!/bin/bash
#
#	20081126 Brandon Pierce <brandon@ihashacks.com>
#
#	Checks the transactional log sizes of a MSSQL2005 server for size thresholds
#

#
# Sample Nagios command.cfg definition
#
#	# 'check_mssql_log' command definition
#	define command {
#		command_name	check_mssql_log
#		command_line	$USER1$/check_mssql_log $HOSTADDRESS$ $USER7$ $USER8$ $ARG1$ $ARG2$ $ARG3$
#	}

#
# Sample Nagios host entry
#
#	define service {
#		host_name				Beta
#		service_description		Syspro S DB Log Size
#		is_volatile             0
#	    check_period            24x7
#	    max_check_attempts      3
#	    normal_check_interval   5
#	    retry_check_interval    1
#	    contact_groups          nagiosadmins
#	    notification_interval   120
#	    notification_period     24x7
#	    notification_options    c,r
#	    check_command           check_mssql_log!SolidStateCoS!1572864!3145728
#	}


SQLSH="/usr/bin/sqsh -m bcp -b"
SRV=$1
SQLU=$2
SQLP=$3
DB=$4
SWARN=$5
SCRIT=$6

#
# Help/Usage
#
usage()
{
	echo "Usage: `basename $0` <server> <user> <password> <database> <warning size (KB)> <critical size (KB)>"
	exit 2	
}


#
# We need all siz command line parameters or fail
#
if [ ${#@} -lt 6 ]; then
	usage
fi


#
# Size ONLY
#
LOGSIZE=`$SQLSH -S $SRV -U $SQLU -P $SQLP -C \
	"SELECT counter_name,cntr_value,instance_name \
	FROM sys.dm_os_performance_counters \
	WHERE counter_name = 'Log File(s) Size (KB)' \
	AND instance_name = '$DB'" 2> /dev/null \
	| awk -F\| ' { print $2 } '`

INTSIZE=`echo $LOGSIZE | \
	grep -o -e '[0-9]*\.' | \
	sed 's/\.//g' \
	`


#
# If we don't have any usable data, throw a Nagios error rather than generic
# script failure
#
if [ -z $LOGSIZE ] || [ -z $INTSIZE ]; then
	echo "Error retrieving log size"
	exit 2
fi


#
# Test it
#
if [ $INTSIZE -ge $SCRIT ]; then
	echo "Size is critical at $INTSIZE"
	exit 2
elif [ $INTSIZE -ge $SWARN ]; then
	echo "Size is warned at $INTSIZE"
	exit 1
else
	echo "Size is within constraints at $INTSIZE"
	exit 0
fi
